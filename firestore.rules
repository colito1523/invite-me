rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Reglas para la colecci칩n /users
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId || 
        request.auth.uid in resource.data.blockedUsers || 
        request.auth.uid in request.resource.data.blockedUsers ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['hideStoriesFrom'])) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount'])) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['imageUrl', 'eventImage']))
      );

      // Subcolecciones existentes...
      match /events/{eventId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      match /friends/{friendId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }

      match /likes/{likeId} {
        allow read, write: if request.auth != null;
      }

      match /friendRequests/{requestId} {
        allow read: if request.auth != null && (
          request.auth.uid == userId ||              // Destinatario
          request.auth.uid == resource.data.fromId  // Remitente
        );
        allow create: if request.auth != null;
        allow write: if request.auth != null && (
          request.auth.uid == userId ||              // Destinatario
          request.auth.uid == resource.data.fromId   // Remitente
        );
      }

      match /note/{noteId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
        match /likes/{likeId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null;
          allow delete: if request.auth != null && (
            request.auth.uid == userId ||              // Due침o de la nota
            request.auth.uid == resource.data.userId   // Usuario que dio el like
          );
          allow write: if request.auth != null && (
            request.auth.uid == userId ||              // Due침o de la nota
            request.auth.uid == resource.data.userId   // Usuario que dio el like
          );
        }
      }

      match /stories/{storyId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null && (
          request.auth.uid == userId || // Allow owner to update
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewers']) || // Allow updating viewers array
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) // Allow updating likes array
        );
        allow delete: if request.auth != null && request.auth.uid == userId; // Only owner can delete
      }

      match /notifications/{notificationId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null;
        allow delete: if request.auth != null && (
          request.auth.uid == userId ||
          request.auth.uid == resource.data.fromId
        );
      }

      match /blockedUsers/{blockedUserId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && (
          request.auth.uid == userId ||  // Due침o del perfil puede bloquear/desbloquear
          request.auth.uid == blockedUserId  // Usuario bloqueado puede ver su estado
        );
      }
    }

    // Nueva regla para GoBoxs
    match /GoBoxs/{boxId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    // Regla para EventsPriv
    match /EventsPriv/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.Admin ||
        request.auth.uid in (resource.data.attendees || []).uid ||
        request.auth.uid in (resource.data.invitedFriends || []) ||
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['image', 'imageUrl', 'eventImage', 'title', 'description', 'address'])
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.Admin ||
        request.auth.uid in (resource.data.attendees || []).uid ||
        request.auth.uid in (resource.data.invitedFriends || []).uid
      );
    }

    match /users/{userId}/events/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid == resource.data.Admin ||
        request.auth.uid == resource.data.uid
      );
    }

    match /users/{userId}/notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid == resource.data.fromId
      );
    }

    match /complaints/{complaintId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
    }

    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.reportedBy || 
        request.auth.uid == resource.data.storyOwner
      );
      allow update: if false;
      allow delete: if false;
    }
  }
}